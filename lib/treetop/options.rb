# Autogenerated from a Treetop grammar. Edits may be lost.


module Options
  include Treetop::Runtime

  def root
    @root ||= :input
  end

  module Input0
    def instrument_spec
      elements[0]
    end

    def time_spec
      elements[1]
    end

    def key_spec
      elements[2]
    end

    def length_spec
      elements[3]
    end
  end

  def _nt_input
    start_index = index
    if node_cache[:input].has_key?(index)
      cached = node_cache[:input][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_instrument_spec
    s0 << r1
    if r1
      r2 = _nt_time_spec
      s0 << r2
      if r2
        r3 = _nt_key_spec
        s0 << r3
        if r3
          r4 = _nt_length_spec
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Input0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:input][start_index] = r0

    r0
  end

  module InstrumentSpec0
    def whitespace1
      elements[0]
    end

    def whitespace2
      elements[2]
    end

    def instr
      elements[3]
    end

    def whitespace3
      elements[4]
    end

    def ls
      elements[5]
    end
  end

  def _nt_instrument_spec
    start_index = index
    if node_cache[:instrument_spec].has_key?(index)
      cached = node_cache[:instrument_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_empty
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_whitespace
      s2 << r3
      if r3
        if has_terminal?("instrument:", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 11))
          @index += 11
        else
          terminal_parse_failure("instrument:")
          r4 = nil
        end
        s2 << r4
        if r4
          r5 = _nt_whitespace
          s2 << r5
          if r5
            r6 = _nt_instr
            s2 << r6
            if r6
              r7 = _nt_whitespace
              s2 << r7
              if r7
                r8 = _nt_ls
                s2 << r8
              end
            end
          end
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(InstrumentSpec0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:instrument_spec][start_index] = r0

    r0
  end

  module TimeSpec0
    def whitespace1
      elements[0]
    end

    def whitespace2
      elements[2]
    end

    def int1
      elements[3]
    end

    def int2
      elements[5]
    end

    def whitespace3
      elements[6]
    end

    def ls
      elements[7]
    end
  end

  def _nt_time_spec
    start_index = index
    if node_cache[:time_spec].has_key?(index)
      cached = node_cache[:time_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_empty
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_whitespace
      s2 << r3
      if r3
        if has_terminal?("time signature:", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 15))
          @index += 15
        else
          terminal_parse_failure("time signature:")
          r4 = nil
        end
        s2 << r4
        if r4
          r5 = _nt_whitespace
          s2 << r5
          if r5
            r6 = _nt_int
            s2 << r6
            if r6
              if has_terminal?("/", false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("/")
                r7 = nil
              end
              s2 << r7
              if r7
                r8 = _nt_int
                s2 << r8
                if r8
                  r9 = _nt_whitespace
                  s2 << r9
                  if r9
                    r10 = _nt_ls
                    s2 << r10
                  end
                end
              end
            end
          end
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(TimeSpec0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:time_spec][start_index] = r0

    r0
  end

  module KeySpec0
    def whitespace1
      elements[0]
    end

    def whitespace2
      elements[2]
    end

    def key
      elements[3]
    end

    def whitespace3
      elements[4]
    end

    def ls
      elements[5]
    end
  end

  def _nt_key_spec
    start_index = index
    if node_cache[:key_spec].has_key?(index)
      cached = node_cache[:key_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_empty
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_whitespace
      s2 << r3
      if r3
        if has_terminal?("key:", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure("key:")
          r4 = nil
        end
        s2 << r4
        if r4
          r5 = _nt_whitespace
          s2 << r5
          if r5
            r6 = _nt_key
            s2 << r6
            if r6
              r7 = _nt_whitespace
              s2 << r7
              if r7
                r8 = _nt_ls
                s2 << r8
              end
            end
          end
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(KeySpec0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:key_spec][start_index] = r0

    r0
  end

  module LengthSpec0
    def whitespace1
      elements[0]
    end

    def whitespace2
      elements[2]
    end

    def int
      elements[3]
    end

    def whitespace3
      elements[4]
    end

    def ls
      elements[5]
    end
  end

  def _nt_length_spec
    start_index = index
    if node_cache[:length_spec].has_key?(index)
      cached = node_cache[:length_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_empty
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_whitespace
      s2 << r3
      if r3
        if has_terminal?("length:", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 7))
          @index += 7
        else
          terminal_parse_failure("length:")
          r4 = nil
        end
        s2 << r4
        if r4
          r5 = _nt_whitespace
          s2 << r5
          if r5
            r6 = _nt_int
            s2 << r6
            if r6
              r7 = _nt_whitespace
              s2 << r7
              if r7
                r8 = _nt_ls
                s2 << r8
              end
            end
          end
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(LengthSpec0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:length_spec][start_index] = r0

    r0
  end

  def _nt_instr
    start_index = index
    if node_cache[:instr].has_key?(index)
      cached = node_cache[:instr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("soprano recorder", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 16))
      @index += 16
    else
      terminal_parse_failure("soprano recorder")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("alto recorder", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 13))
        @index += 13
      else
        terminal_parse_failure("alto recorder")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("concert flute", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 13))
          @index += 13
        else
          terminal_parse_failure("concert flute")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("oboe", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure("oboe")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("bassoon", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 7))
              @index += 7
            else
              terminal_parse_failure("bassoon")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("violin", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 6))
                @index += 6
              else
                terminal_parse_failure("violin")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("cello", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
                  @index += 5
                else
                  terminal_parse_failure("cello")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?("guitar", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 6))
                    @index += 6
                  else
                    terminal_parse_failure("guitar")
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?("piano", false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 5))
                      @index += 5
                    else
                      terminal_parse_failure("piano")
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:instr][start_index] = r0

    r0
  end

  module Key0
    def pitch
      elements[0]
    end

    def whitespace
      elements[1]
    end

  end

  module Key1
    def pitch
      elements[0]
    end

    def whitespace
      elements[1]
    end

  end

  def _nt_key
    start_index = index
    if node_cache[:key].has_key?(index)
      cached = node_cache[:key][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_pitch
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_pitch
      s2 << r3
      if r3
        r4 = _nt_whitespace
        s2 << r4
        if r4
          if has_terminal?("major", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure("major")
            r5 = nil
          end
          s2 << r5
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Key0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        i6, s6 = index, []
        r7 = _nt_pitch
        s6 << r7
        if r7
          r8 = _nt_whitespace
          s6 << r8
          if r8
            if has_terminal?("minor", false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 5))
              @index += 5
            else
              terminal_parse_failure("minor")
              r9 = nil
            end
            s6 << r9
          end
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Key1)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r0 = r6
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:key][start_index] = r0

    r0
  end

  def _nt_pitch
    start_index = index
    if node_cache[:pitch].has_key?(index)
      cached = node_cache[:pitch][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("Ab", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("Ab")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("A", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("A")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("A#", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("A#")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("Bb", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("Bb")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("B", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("B")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("B#", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("B#")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("Cb", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure("Cb")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?("C", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("C")
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?("C#", false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure("C#")
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?("Db", false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure("Db")
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?("D", false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure("D")
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          if has_terminal?("D#", false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
                            @index += 2
                          else
                            terminal_parse_failure("D#")
                            r12 = nil
                          end
                          if r12
                            r0 = r12
                          else
                            if has_terminal?("Eb", false, index)
                              r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
                              @index += 2
                            else
                              terminal_parse_failure("Eb")
                              r13 = nil
                            end
                            if r13
                              r0 = r13
                            else
                              if has_terminal?("E", false, index)
                                r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure("E")
                                r14 = nil
                              end
                              if r14
                                r0 = r14
                              else
                                if has_terminal?("E#", false, index)
                                  r15 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                  @index += 2
                                else
                                  terminal_parse_failure("E#")
                                  r15 = nil
                                end
                                if r15
                                  r0 = r15
                                else
                                  if has_terminal?("Fb", false, index)
                                    r16 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                    @index += 2
                                  else
                                    terminal_parse_failure("Fb")
                                    r16 = nil
                                  end
                                  if r16
                                    r0 = r16
                                  else
                                    if has_terminal?("F", false, index)
                                      r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                      @index += 1
                                    else
                                      terminal_parse_failure("F")
                                      r17 = nil
                                    end
                                    if r17
                                      r0 = r17
                                    else
                                      if has_terminal?("F#", false, index)
                                        r18 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                        @index += 2
                                      else
                                        terminal_parse_failure("F#")
                                        r18 = nil
                                      end
                                      if r18
                                        r0 = r18
                                      else
                                        if has_terminal?("Gb", false, index)
                                          r19 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                          @index += 2
                                        else
                                          terminal_parse_failure("Gb")
                                          r19 = nil
                                        end
                                        if r19
                                          r0 = r19
                                        else
                                          if has_terminal?("G", false, index)
                                            r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                            @index += 1
                                          else
                                            terminal_parse_failure("G")
                                            r20 = nil
                                          end
                                          if r20
                                            r0 = r20
                                          else
                                            if has_terminal?("G#", false, index)
                                              r21 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                              @index += 2
                                            else
                                              terminal_parse_failure("G#")
                                              r21 = nil
                                            end
                                            if r21
                                              r0 = r21
                                            else
                                              @index = i0
                                              r0 = nil
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:pitch][start_index] = r0

    r0
  end

  module Int0
    def digit
      elements[0]
    end

    def int
      elements[1]
    end
  end

  def _nt_int
    start_index = index
    if node_cache[:int].has_key?(index)
      cached = node_cache[:int][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_digit
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_digit
      s2 << r3
      if r3
        r4 = _nt_int
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Int0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:int][start_index] = r0

    r0
  end

  def _nt_digit
    start_index = index
    if node_cache[:digit].has_key?(index)
      cached = node_cache[:digit][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("0", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("0")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("1", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("1")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("2", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("2")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("3", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("3")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("4", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("4")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("5", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("5")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("6", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("6")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?("7", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("7")
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?("8", false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("8")
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?("9", false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure("9")
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:digit][start_index] = r0

    r0
  end

  module Whitespace0
    def whitespace
      elements[1]
    end
  end

  def _nt_whitespace
    start_index = index
    if node_cache[:whitespace].has_key?(index)
      cached = node_cache[:whitespace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_empty
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      if has_terminal?("\x20", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\x20")
        r3 = nil
      end
      s2 << r3
      if r3
        r4 = _nt_whitespace
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Whitespace0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:whitespace][start_index] = r0

    r0
  end

  def _nt_ls
    start_index = index
    if node_cache[:ls].has_key?(index)
      cached = node_cache[:ls][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("\x10", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\x10")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("\x13", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\x13")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("\x13\x10", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("\x13\x10")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:ls][start_index] = r0

    r0
  end

  def _nt_empty
    start_index = index
    if node_cache[:empty].has_key?(index)
      cached = node_cache[:empty][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 0))
      @index += 0
    else
      terminal_parse_failure("")
      r0 = nil
    end

    node_cache[:empty][start_index] = r0

    r0
  end

end

class OptionsParser < Treetop::Runtime::CompiledParser
  include Options
end

